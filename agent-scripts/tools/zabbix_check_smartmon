#!/usr/bin/env python

# -*- coding: iso8859-1 -*-
#
# check_smartmon
#
#   This program is free software; you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation; either version 2 of the License, or
#   (at your option) any later version.
#
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License along
#   with this program; if not, write to the Free Software Foundation, Inc.,
#   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.


"""Package versioning
"""

import os.path
import sys
import re

from optparse import OptionParser

__author__ = "Marc Schoechlin <ms@256bit.org>"
__version__ = "$Revision$"


# path to smartctl
_smartctlPath   = r"/usr/sbin/smartctl"
_default_config = r"/etc/check_smartmon.conf"	

# application wide verbosity (can be adjusted with -v [0-3])
_verbosity = 0


def parseCmdLine(args):
  """Commandline parsing."""

  usage = "usage: %prog [options] device"
  version = "%%prog %s" % (__version__)

  parser = OptionParser(usage=usage, version=version)

  parser.add_option("-f", "--config", action="store", dest="config", default="", metavar="CONFIG",
                  help="file with a list of checks (commandline options), default is "+_default_config+ "\nExample line: '-t cciss,0 -d /dev/cciss/c0d0'")

  parser.add_option("-d", "--device", action="store", dest="device", default="", metavar="DEVICE",
                  help="device to check")

  parser.add_option("-t", "--type", action="store", dest="type", default="", metavar="TYPE",
                  help="device type (see 'smartctl -t'")

  parser.add_option("-v", "--verbosity", action="store",
                  dest="verbosity", type="int", default=0,
                  metavar="LEVEL", help="set verbosity level to LEVEL; defaults to 0 (quiet), \
                                  possible values go up to 3")
  parser.add_option("-w", "--warning-threshold", metavar="TEMP", action="store",
                  type="int", dest="warningThreshold", default=55,
                  help="set temperature warning threshold to given temperature (defaults to 55)")
  parser.add_option("-c", "--critical-threshold", metavar="TEMP", action="store",
                  type="int", dest="criticalThreshold", default="60",
                  help="set temperature critical threshold to given temperature (defaults to 60)")

  return parser.parse_args(args)


def checkDevice(path):
        """Check if device exists and permissions are ok.
        
        Returns:
                - 0 ok
                - 1 no such device
                - 2 no read permission given
        """

        vprint(3, "Check if %s does exist and can be read" % path)
        if not os.access(path, os.F_OK):
                return (1, "UNKNOWN: no such device found")
        elif not os.access(path, os.R_OK):
                return (2, "UNKNOWN: no read permission given")
        else:
                return (0, "")


def checkSmartMonTools(path):
        """Check if smartctl is available and can be executed.

        Returns:
                - 0 ok
                - 1 no such file
                - 2 cannot execute file
        """

        vprint(3, "Check if %s does exist and can be read" % path)
        if not os.access(path, os.F_OK):
                return (1, "UNKNOWN: cannot find %s" % path)
        elif not os.access(path, os.X_OK):
                return (2, "UNKNOWN: cannot execute %s" % path)
        else:
                return (0, "")


def callSmartMonTools(path,type,device):

	
	if (type != ""):
		type = "-d " + type

        # get health status
        cmd = "LANG=C %s -H %s %s" % (path, type, device)
        vprint(3, "Get device health status: %s" % cmd)
        (child_stdin, child_stdout, child_stderr) = os.popen3(cmd)
        line = child_stderr.readline()
        if len(line):
                return (3, "UNKNOWN: call exits unexpectedly (%s)" % line, "",
                                "")
        healthStatusOutput = ""
        for line in child_stdout:
                healthStatusOutput = healthStatusOutput + line

        # get temperature
		cmd = "LANG=C %s -A %s %s" % (path, type, device)
        vprint(3, "Get device temperature: %s" % cmd)
        (child_stdin, child_stdout, child_stderr) = os.popen3(cmd)
        line = child_stderr.readline()
        if len(line):
                return (3, "UNKNOWN: call exits unexpectedly (%s)" % line, "",
                                "")

        temperatureOutput = ""
        for line in child_stdout:
                temperatureOutput = temperatureOutput + line

        return (0 ,"", healthStatusOutput, temperatureOutput)


def parseOutput(healthMessage, temperatureMessage):
        """Parse smartctl output

        Returns (health status, temperature).
        """

        # parse health status
        #
        # look for line '=== START OF READ SMART DATA SECTION ==='
        statusLine = ""
        lines = healthMessage.split("\n")
        getNext = 0
        healthStatus = "<undefined>"
        for line in lines:
          match = re.match(r"^SMART Health Status:\s+(.*)\s*$", line)
          if match:
            healthStatus = match.group(1)
            break
        vprint(3, "Health status: %s" % healthStatus)


        # parse temperature attribute line
        temperature = 0
        lines = temperatureMessage.split("\n")
        for line in lines:
          match = re.match(r"^Current Drive Temperature:\s+(\d+) C.*$", line)
          if match:
            temperature = int(match.group(1))
            break
        vprint(3, "Temperature: %d" %temperature)

        return (healthStatus, temperature)
# end


def createReturnInfo(healthStatus, temperature, warningThreshold,
                criticalThreshold):
        """Create return information according to given thresholds."""

        # this is absolutely critical!
        if healthStatus != "OK":
                return (2, "CRITICAL: device does not pass health status")

        if temperature > criticalThreshold:
                return (2, "CRITICAL: device temperature (%d) exceeds critical temperature threshold (%s)" % (temperature, criticalThreshold))
        elif temperature > warningThreshold:
                return (1, "WARNING: device temperature (%d) exceeds warning temperature threshold (%s)" % (temperature, warningThreshold))
        else:
                return (0, "OK: device is functional and stable (temperature: %d)" % temperature)


def exitWithMessage(value, message):
        """Exit with given value and status message."""

        if value == "OK" :
		    errorcode = 0
        elif value == "WARNING" :
		    errorcode = 1
        else:
		    errorcode = 2

        print 'OVERALL STATUS %s - "%s" = %i' % (value,message,errorcode)
        sys.exit(errorcode)

def vprint(level, message):
        """Verbosity print.

        Decide according to the given verbosity level if the message will be
        printed to stdout.
        """

        if level <= verbosity:
                print message

if __name__ == "__main__":

 if (len(sys.argv) <= 1):
	print "maybe -h ?"
 (options, args) = parseCmdLine(sys.argv)
 verbosity = options.verbosity

 optarr = []
 if os.path.isfile(options.config):
    filehandle = open(options.config, 'r')
    whites = re.compile(r'\s+')
    while 1:
      lineStr = filehandle.readline()
      if not(lineStr):
            break
      if re.match("^(\s*|#.*)$",lineStr):
         continue
      lineStr = lineStr.rstrip()
      (options, args) = parseCmdLine(whites.split(lineStr))
      optarr.append([options, args])
 else:
    optarr.append(parseCmdLine(sys.argv))

 line = 0
 overall_status = "OK"
 overall_message = ""

 for options, args in optarr:
	
    line += 1	

    if line > 1:
       overall_message += " "

    vprint(3, "Config Line number "+str(line))

    vprint(2, "Get device name")
    device = options.device
    vprint(1, "Device: %s" % device)

    vprint(2, "Get device type")
    type = options.type
    vprint(1, "Device Type: %s" % type)


    # check if we can access 'path'
    vprint(2, "Check device")
    (value, message) = checkDevice(device)
    if value != 0:
            overall_message += "[%s :: %s] %s " % (options.device,options.type,message)
            overall_status = "CRITICAL"
            continue
    else:
            overall_message += "[%s :: %s] " % (options.device,options.type)

    # check if we have smartctl available
    (value, message) = checkSmartMonTools(_smartctlPath)
    if value != 0:
            overall_message += ", "+message
            overall_status = "CRITICAL"
            continue
    vprint(1, "Path to smartctl: %s" % _smartctlPath)

    # call smartctl and parse output
    vprint(2, "Call smartctl")
    (value, message, healthStatusOutput, temperatureOutput) = callSmartMonTools(_smartctlPath, type, device)
    if value != 0:
            overall_message += ", "+message
            overall_status = "CRITICAL"
            continue

    vprint(2, "Parse smartctl output")
    (healthStatus, temperature) = parseOutput(healthStatusOutput, temperatureOutput)
    vprint(2, "Generate return information")
    (value, message) = createReturnInfo(healthStatus, temperature,
           options.warningThreshold, options.criticalThreshold)
    if value == 1:
            overall_status = "WARNING"
    elif value > 1:
            overall_status = "CRITICAL"
    overall_message += " "+message

# exit program
exitWithMessage(overall_status, overall_message)

# vim: ai et ts=2 shiftwidth=2 expandtab tabstop=3 tw=120
