#!/usr/bin/env python3
#
#   This program is free software; you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation; either version 2 of the License, or
#   (at your option) any later version.
#
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License along
#   with this program; if not, write to the Free Software Foundation, Inc.,
#   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.

# Marc Schoechlin <ms@256bit.org>

import argparse
import json
import os
import re
import sys

config_default = {
}

# https://hilfe.web.de/pop-imap/imap/imap-serverdaten.html

####################################################################################
#### HELPERS

import smtplib
import sys
import traceback
import time
import uuid

def my_random_string(string_length=10):
    """Returns a random string of length string_length."""
    random = str(uuid.uuid4()) # Convert UUID format to a Python string.
    random = random.upper() # Make all characters uppercase.
    random = random.replace("-","") # Remove the UUID '-'.
    return random[0:string_length] # Return the random string.

def read_config(config_file):
    config = config_default
    if os.path.exists(config_file):
        if args.debug:
            sys.stderr.write("reading config file %s\n" % config_file)
        try:
            fh = open(config_file, 'r')
            content = fh.read()

            # Remove multiline comments
            content = re.sub('^\s*/\*.*?\*/\s*', '', content, 0, re.DOTALL | re.MULTILINE)
            # Remove single line comments
            content = re.sub('^\s*//.*$\n', '', content, 0, re.MULTILINE)

            config = json.loads(content)

            fh.close()
        except FileNotFoundError:
            sys.stderr.write("Config file does not exist\n")
        except PermissionError:
            sys.stderr.write("Could not read config file\n")
        except json.decoder.JSONDecodeError:
            sys.stderr.write("Could not parse JSON config file\n")
        except:
            sys.stderr.write("An unexpected error occured while reading config file\n")

    return config

####################################################################################
#### MAIN

parser = argparse.ArgumentParser(
    description='perform device disovery for zabbix',
    formatter_class=argparse.RawTextHelpFormatter,
    epilog='''Example json configuration file:
{
  "regex_includes": [
    ".*"
  ],
  "regex_excludes": [
    "loop.*"
  ]
}

Options ar evaluated like this:
- stage 1: include the following devices by regex
- stage 2: exclude the following devices from step 1 by regex

    '''
)

parser.add_argument(
    '--debug',
    help='Output debug information',
    action='store_true',
)


parser.add_argument(
   '--smtp',
   nargs='?',
   type=str,
   help='configuration file',
   default=None,
   required=False,
)

parser.add_argument(
   '--smtp',
   nargs='?',
   type=str,
   help='configuration file',
   default=None,
   required=False,
)

parser.add_argument(
   '--config',
   nargs='?',
   type=str,
   help='configuration file',
   default=None,
   required=False,
)

args = parser.parse_args()

devices_discovered = {'data': []}

# read the config
if args.config is not None:
    config = read_config(args.config)
else:
    config = config_default

if args.debug:
    sys.stderr.write("** Effective config:\n%s\n" % json.dumps(config, indent=2))



fromaddr="marc.schoechlin@web.de"
toaddr="marc.schoechlin@web.de"
login="marc.schoechlin@web.de"
password="Einie0ci"

# Add the From: and To: headers at the start!
msg = ("From: %s\r\nTo: %s\r\n\r\n" % (fromaddr, toaddr))


id_nr = int(time.time())
msg += "Subject: MAIL ROUNDTRIP TESTMAIL :: %s" % id_nr
msg += "\n\n"
for n in range(1,100):
    msg += my_random_string(n) + " "

print(msg)

try:
    server = smtplib.SMTP('smtp.web.de', 587)
    server.set_debuglevel(0)
    server.starttls()
    server.ehlo()
    server.login(login,password)
    server.sendmail(fromaddr, toaddr, msg)
    server.quit()
except Exception as e:
    print("Exception happened:")
    sys.stderr.write('*' * 60 + "\n")
    sys.stderr.write("*** " + str(e)+"\n")
    sys.stderr.write('*' * 60 + "\n")
    sys.stderr.write("\n")
    traceback.print_exc(file=sys.stderr)
    sys.stderr.write('-' * 60 +  "\n")
    sys.exit(1)

sys.exit(0)
